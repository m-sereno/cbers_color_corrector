# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CBERSColorCorrectorDialog
                                 A QGIS plugin
 This plugin corrects the color from CBERS images to match the database
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-27
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Mateus Sereno
        email                : mateus.sereno@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import numpy as np

from qgis.core import QgsRasterLayer, QgsProject
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsMapLayerType, QgsMessageLog, QgsRasterLayer, QgsRectangle, QgsRasterBlock, Qgis
from qgis.PyQt.QtCore import QCoreApplication, Qt
from qgis.PyQt.QtWidgets import QDialog, QComboBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'cbers_color_corrector_dialog_base.ui'))


class CBERSColorCorrectorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CBERSColorCorrectorDialog, self).__init__(parent)
        self.setupUi(self)

        self.populate_combobox()
        self.button_box.accepted.connect(self.on_ok_clicked)

    def populate_combobox(self):
        """Populate the combo box with available raster layers."""
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() == QgsMapLayerType.RasterLayer:
                self.selectLayerComboBox.addItem(layer.name())
    
    def on_ok_clicked(self):
        """Handle the OK button click."""
        selected_layer = self.selectLayerComboBox.currentText()
        QgsMessageLog.logMessage(f'Selected layer: {selected_layer}', "CBERSColorCorrector", Qgis.Info)

        # Load the raster
        layer = QgsProject.instance().mapLayersByName(selected_layer)[0]
        
        width = layer.width()
        height = layer.height()

        provider = layer.dataProvider()

        for band_index in range(0, 3):
            for y_start in range(0, width, 512):
                for x_start in range(0, height, 512):
                    # Define the extent of the current tile:
                    extent = QgsRectangle(
                        layer.extent().xMinimum() + x_start * layer.rasterUnitsPerPixelX(),
                        layer.extent().yMinimum() + y_start * layer.rasterUnitsPerPixelY(),
                        layer.extent().xMinimum() + (x_start + 512) * layer.rasterUnitsPerPixelX(),
                        layer.extent().yMinimum() + (y_start + 512) * layer.rasterUnitsPerPixelY()
                    )

                    # Read tile data:
                    tile : QgsRasterBlock = provider.block(band_index, extent, 512, 512)

                    data = tile.data()

                    histogram, bin_edges = np.histogram(data, bins=256, range=(0, 256))

                    # Print histogram:
                    QgsMessageLog.logMessage("Histogram for tile ({}, {}, {}): {}".format(band_index, y_start, x_start, histogram))